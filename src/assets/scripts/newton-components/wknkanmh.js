/*! Built with http://stenciljs.com */
const{h:t}=window.NewtonComponents,e={CHART_TYPE_LINE:"line",CHART_TYPE_BAR:"bar",CHART_TYPE_ARRAY:[{id:"line",value:"Line"},{id:"bar",value:"Bar"}],GROUP_DATA_HOUR:"hour",GROUP_DATA_DAY:"day",GROUP_DATA_WEEK:"week",GROUP_DATA_MONTH:"month",GROUP_DATA_YEAR:"year",GROUP_DATA_ARRAY:[{id:"hour",value:"Hour"},{id:"day",value:"Day"},{id:"week",value:"Week"},{id:"month",value:"Month"},{id:"year",value:"Year"}],SWIPE_RIGHT:"Right",SWIPE_LEFT:"left",DEFINE_SWIPE_ACT:100};class i{constructor(){this.chartOption={},this.type=e.CHART_TYPE_BAR,this.groupData=e.GROUP_DATA_DAY,this.limit=400,this.useSlot=!1,this.timeZone=Intl.DateTimeFormat().resolvedOptions().timeZone,this.eventsArray=null,this.swipeIndex=0,this.option={order:"desc",orderBy:"createTime"},this.chartTypeArray=e.CHART_TYPE_ARRAY,this.groupDataArray=e.GROUP_DATA_ARRAY,this.selectChartType=null,this.selectGroupData=null,this.startPageX=0,this.swipeLimitLeft=!1}componentWillLoad(){this.isServer||("undefined"!=typeof newtonService?"undefined"!=typeof Chart?this.logIn():console.error("Chart.js not installed, please install http://www.chartjs.org/ and bind it to the window."):console.error("Newton Service not installed, please install @pfizer/newton-js-sdk and bind it to the window."))}componentDidUpdate(){this.addChart()}startSwipe(t){if("dragstart"===t.type)t.dataTransfer.setDragImage(new Image,0,0),this.startPageX=t.pageX;else{const e=t.changedTouches[0];this.startPageX=e.pageX}}finishSwipe(t){this.setSwipeLeftorRight(t),this.touchDirection&&this.updateTargetContent()}logIn(){this.isServer||newtonService.service("auth").loginViaEmail("test33@alextheward.com","password1").then(t=>{this.getNewtonEvents()})}setSwipeLeftorRight(t){let i=0;const a=(i="dragend"===t.type?t.pageX:t.changedTouches[0].pageX)-this.startPageX;this.touchDirection=a<-e.DEFINE_SWIPE_ACT?e.SWIPE_RIGHT:a>e.DEFINE_SWIPE_ACT?e.SWIPE_LEFT:""}updateTargetContent(){this.touchDirection===e.SWIPE_RIGHT&&this.swipeIndex-this.limit>=0?(this.swipeIndex=this.swipeIndex-this.limit,this.getNewtonEvents()):this.touchDirection!==e.SWIPE_LEFT||this.swipeLimitLeft||(this.swipeIndex=this.swipeIndex+this.limit,this.getNewtonEvents())}getNewtonEvents(){this.setOption(),newtonService.service("event").get(this.option).then(t=>{0===t.length?(this.touchDirection===e.SWIPE_RIGHT?this.swipeIndex=this.swipeIndex+this.limit:(this.swipeLimitLeft=!0,this.swipeIndex=this.swipeIndex-this.limit),this.requestEventDataNotFound.emit({message:"Data not Found."})):(this.selectGroupData=this.selectGroupData?this.selectGroupData:this.groupData,this.selectChartType=this.selectChartType?this.selectChartType:this.type,this.swipeLimitLeft=!1,this.eventsArray=t)})}setOption(){this.option.payloadFilters=`eventType=${this.eventType}`,this.option.limit=this.limit,this.option.offset=this.swipeIndex}groupDataChanged(t){this.selectGroupData=t.srcElement.value,this.addChart()}chartTypeChanged(t){this.selectChartType=t.srcElement.value,this.addChart()}addChart(){const t=this.getData(),e=this.getChartLabel();this.chartObject?this.updateChartObject(t,e):this.createChart(t,e)}updateChartObject(t,e){this.chartObject.config.data.datasets[0].data=t.yData,this.chartObject.config.data.datasets[0].label=e,this.chartObject.config.data.labels=t.xData,this.chartObject.config.type=this.selectChartType,this.chartObject.update()}createChart(t,e){const i=this.chart.querySelector("#time-line-chart--canvas");this.chartOption.label=e,this.chartOption.data=t.yData,this.chartObject=new Chart(i,{type:this.selectChartType,data:{labels:t.xData,datasets:[this.chartOption]},options:{scales:{yAxes:[{ticks:{beginAtZero:!0}}]}}})}getChartLabel(){const t=this.yAxis.split(".");return`Number of ${t[t.length-1]} grouped by ${this.selectGroupData}`}getData(){const t={yData:[],xData:[]},i=function(t,i,a){return t.reduce(function(t=[],s){const n=new Date(new Date(s.createTime).toLocaleString("en-US",{timeZone:a.timeZone})),r=new Intl.DateTimeFormat("en-US",{month:"long"}).format(n);let h=`${n.getFullYear()}`;i===e.GROUP_DATA_DAY?h=`${h}-${r}-${n.getDate()}`:i===e.GROUP_DATA_WEEK?h=a.getWeeksInMonth(n.getDate(),n.getMonth(),n.getFullYear(),`${h}-${r}`):i===e.GROUP_DATA_MONTH?h=`${h}-${r}`:i===e.GROUP_DATA_HOUR&&(h=`${h}-${r}-${n.getDate()} ${n.getHours()}:00`);const o=a.getYorderlyData(s),l=t[h];return t[h]?t[h]=l+o:t[h]=o,t},this)}(this.eventsArray,this.selectGroupData,this);return t.xData=Object.keys(i).reverse(),t.yData=Object.keys(i).map(t=>i[t]).reverse(),t}getYorderlyData(t){try{const e=this.yAxis.split(".");let i=null;return 1===e.length?i=t[e[0]]:(i=t.attributes,e.forEach(t=>{i=i[t]})),i}catch(t){return null}}getWeeksInMonth(t,e,i,a){const s=new Date(i,e+1,0).getDate();let n=7-new Date(i,e,1).getDay(),r=1,h=1;for(;r<=s;){if(t>=r&&t<=n)return`week-${h} -${a}`;r=n+1,h++,(n+=7)>s&&(n=s)}}render(){return t("div",null,null!==this.eventsArray?t("div",{class:"time-line-chart",draggable:!0,onDragStart:this.startSwipe.bind(this),onDragEnd:this.finishSwipe.bind(this),onTouchStart:this.startSwipe.bind(this),onTouchEnd:this.finishSwipe.bind(this)},t("canvas",{id:"time-line-chart--canvas",class:"time-line-chart--canvas"}),t("select",{class:"time-line-chart--select",onChange:t=>this.groupDataChanged(t)},this.groupDataArray.map(e=>e.id===this.selectGroupData?t("option",{value:e.id,selected:!0},e.value):t("option",{value:e.id},e.value))),t("select",{class:"time-line-chart--select",onChange:t=>this.chartTypeChanged(t)},this.chartTypeArray.map(e=>e.id===this.selectChartType?t("option",{value:e.id,selected:!0},e.value):t("option",{value:e.id},e.value)))):this.useSlot?t("div",null,t("slot",{name:"display-no-data"})):t("div",null,"No data"))}static get is(){return"newton-timeline"}static get properties(){return{chart:{elementRef:!0},chartOption:{type:"Any",attr:"chart-option"},eventsArray:{state:!0},eventType:{type:String,attr:"event-type"},groupData:{type:String,attr:"group-data"},isServer:{context:"isServer"},limit:{type:Number,attr:"limit"},timeZone:{type:String,attr:"time-zone"},type:{type:String,attr:"type"},useSlot:{type:Boolean,attr:"use-slot"},yAxis:{type:String,attr:"y-axis"}}}static get events(){return[{name:"requestEventDataNotFound",method:"requestEventDataNotFound",bubbles:!0,cancelable:!0,composed:!0}]}static get style(){return".time-line-chart{width:800px!important;height:500px!important}"}}export{i as NewtonTimeline};