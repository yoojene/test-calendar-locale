/*! Built with http://stenciljs.com */
const{h:e}=window.NewtonComponents;class t{constructor(){this.showTermsAndConditions=!1,this.agreed=!1}onAgreedDidChange(e){this.onAgreedChange.emit(e)}componentWillLoad(){this.showTermsAndConditions=!this.hideTermsOnMount}componentDidLoad(){this.checkBoxElement=this.element.querySelector(".checkbox"),this.useScrollValidation&&(this.intersectionElement=this.element.querySelector(".intersection-target"),this.addIntersectionObserver())}showTerms(){this.showTermsAndConditions=!0}hideTerms(){this.showTermsAndConditions=!1}get hasAgreed(){return this.agreed}addIntersectionObserver(){"IntersectionObserver"in window?(this.io=new IntersectionObserver(e=>{e[0].isIntersecting&&(!0===this.useCheckBoxValidation&&(this.checkBoxElement.checked=!0),this.agreed=!0,this.removeIntersectionObserver())}),this.io.observe(this.intersectionElement)):console.info("IntersectionObserver not supported")}removeIntersectionObserver(){this.io&&(this.io.disconnect(),this.io=null)}onCheckboxChange(e){this.agreed=e.target.checked}render(){return e("div",{class:"container"},e("div",{class:"text",hidden:!this.showTermsAndConditions},this.termsText),e("div",{class:"conditions",hidden:!this.useCheckBoxValidation},e("input",{type:"checkbox",class:"checkbox",onChange:e=>this.onCheckboxChange(e)}),e("label",{class:"checkbox--label"},this.hideTermsOnMount?e("a",{onClick:()=>this.showTerms()},this.acknowledgmentText):this.acknowledgmentText)),e("div",{class:"intersection-target"}," "))}static get is(){return"newton-text-wall"}static get properties(){return{acknowledgmentText:{type:String,attr:"acknowledgment-text"},agreed:{state:!0,watchCallbacks:["onAgreedDidChange"]},element:{elementRef:!0},hideTerms:{method:!0},hideTermsOnMount:{type:Boolean,attr:"hide-terms-on-mount"},showTerms:{method:!0},showTermsAndConditions:{state:!0},termsText:{type:String,attr:"terms-text"},useCheckBoxValidation:{type:Boolean,attr:"use-check-box-validation"},useScrollValidation:{type:Boolean,attr:"use-scroll-validation"}}}static get events(){return[{name:"onAgreedChange",method:"onAgreedChange",bubbles:!0,cancelable:!0,composed:!0}]}static get style(){return"newton-text-wall .conditions{text-align:center}"}}export{t as NewtonTextWall};